#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Created on Thu Feb 11 09:04:17 2021

@author: jtm
'''

import os
import shutil
import os.path as op

import numpy as np
import pandas as pd

def new_subject(rec_dir, export='000', out_dir_nm='pyplr_analysis'):
    '''Get a handle on a new subject for data analysis.
    
    Parameters
    ----------
    rec_dir : str
        Full path to a Pupil Labs recording directory for a given subject.
    export : str
        The export folder in which to look for files (in case of multiple 
        exports). The default is '000'.
    out_dir_nm : str, optional
        Name for the folder where output will be saved. The default is
        'pyplr_analysis'.

    Raises
    ------
    FileNotFoundError
        If subjdir does not exist.

    Returns
    -------
    s : dict
        Dictionary of subject information.

    '''
    if not op.isdir(rec_dir):
        raise FileNotFoundError(
            '"{}" does not appear to exist.'.format(rec_dir))
    root = op.abspath(rec_dir)
    identifier = op.basename(rec_dir)
    data_dir = op.abspath(op.join(rec_dir, 'exports', '', export, ''))
    out_dir = op.abspath(op.join(rec_dir, out_dir_nm, ''))
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)
    os.mkdir(out_dir)
    print('{}\n{:*^60s}\n{}'.format('*'*60, ' ' + identifier + ' ', '*'*60))
    return {
        'root':root,
        'id':identifier,
        'data_dir':data_dir,
        'out_dir':out_dir
        }

def print_file_structure(rec_dir):
    '''
    Print the file structure of a recording directory.

    Returns
    -------
    None.

    '''
    for root, dirs, files in os.walk(rec_dir):
        level = root.replace(rec_dir, '').count(os.sep)
        indent = ' ' * 4 * (level)
        print(f'{indent}{os.path.basename(root)}/')
        subindent = ' ' * 4 * (level + 1)
        for f in sorted(files):
            print(f'{subindent}{f}')
            
def load_pupil(data_dir, eye_id='best', method='3d c++', cols=None):
    '''Loads 'pupil_positions.csv' data exported from Pupil Player.
    
    Parameters
    ----------
    data_dir : str
        Directory where the Pupil Labs 'pupil_positions.csv' data exists.
    eye : str
        Eye to load. Must be 'left' (1), 'right' (0), or 'best'. If 'best', 
        the eye with the highest average confidence will be loaded. The
        default is None.
    method : string, optional
        Whether to load pupil data generated by the 2d or 3d fitting method. 
        The default is '3d c++'.
    cols : list, optional
        Columns to load from the file (check file for options). Must include 
        ['pupil_timestap', 'method', ] and The default is None 
        (loads all columns).
        
    Returns
    -------
    samps : DataFrame
        Pandas DataFrame containing requested samples.
        
    '''
    fname = op.join(data_dir, '', 'pupil_positions.csv')
    try:
        if cols is None:
            samples = pd.read_csv(fname, index_col='pupil_timestamp')
        else:
            samples = pd.read_csv(
                fname, usecols=cols, index_col='pupil_timestamp')
    except FileNotFoundError as fnf_error:
        print(fnf_error)
    else:
        samples = samples[samples.method==method]  
        if eye_id == 'left':
            samples = samples[samples.eye_id==1]
        elif eye_id == 'right':
            samples = samples[samples.eye_id==0]
        elif eye_id == 'best':
            best = samples.groupby(['eye_id'])['confidence'].mean().idxmax()
            samples = samples[samples.eye_id==best]
        else:
            raise ValueError('Eye must be "left", "right" or "best".')
        print('Loaded {} samples'.format(len(samples)))
        return samples
    
def load_annotations(data_dir):
    '''Loads 'annotations' exported from Pupil Player.
    
    Parameters
    ----------
    data_dir : str
        Directory where the Pupil Labs 'annotations' data exists.
        
    Returns
    -------
    events : pd.DataFrame
        Pandas DataFrame containing annotations / events.
        
    '''
    fname = op.join(data_dir, '', 'annotations.csv')
    try:
        events = pd.read_csv(fname, index_col='timestamp')
        print('Loaded {} events'.format(len(events)))
    except FileNotFoundError as fnf_error:
        print(fnf_error)
    else:
        return events
   
def load_blinks(data_dir):
    '''Loads 'blinks' data exported from Pupil Player.
    
    Parameters
    ----------
    data_dir : str
        Directory where the Pupil Labs 'blinks' data exists.
        
    Returns
    -------
    blinks : pd.DataFrame
        Pandas DataFrame containing blink events.
        
    '''
    fname = op.join(data_dir, '', 'blinks.csv')
    try:
        blinks = pd.read_csv(fname, index_col='id')
        print('{} blinks detected by Pupil Labs (mean dur = {:.3f} s)'.format(
            len(blinks), blinks.duration.mean()))
    except FileNotFoundError as fnf_error:
        print(fnf_error)
    else:
        return blinks
    
def unpack_data_numpy(data, what):
    return np.array([entry[what] for entry in data])

def unpack_data_pandas(data):
    return (pd.DataFrame(data)
              .set_index('timestamp')) 

